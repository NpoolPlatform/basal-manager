// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/basal-manager/pkg/db/ent/api"
	"github.com/google/uuid"
)

// APICreate is the builder for creating a Api entity.
type APICreate struct {
	config
	mutation *APIMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (ac *APICreate) SetCreatedAt(u uint32) *APICreate {
	ac.mutation.SetCreatedAt(u)
	return ac
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ac *APICreate) SetNillableCreatedAt(u *uint32) *APICreate {
	if u != nil {
		ac.SetCreatedAt(*u)
	}
	return ac
}

// SetUpdatedAt sets the "updated_at" field.
func (ac *APICreate) SetUpdatedAt(u uint32) *APICreate {
	ac.mutation.SetUpdatedAt(u)
	return ac
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ac *APICreate) SetNillableUpdatedAt(u *uint32) *APICreate {
	if u != nil {
		ac.SetUpdatedAt(*u)
	}
	return ac
}

// SetDeletedAt sets the "deleted_at" field.
func (ac *APICreate) SetDeletedAt(u uint32) *APICreate {
	ac.mutation.SetDeletedAt(u)
	return ac
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ac *APICreate) SetNillableDeletedAt(u *uint32) *APICreate {
	if u != nil {
		ac.SetDeletedAt(*u)
	}
	return ac
}

// SetProtocol sets the "protocol" field.
func (ac *APICreate) SetProtocol(s string) *APICreate {
	ac.mutation.SetProtocol(s)
	return ac
}

// SetNillableProtocol sets the "protocol" field if the given value is not nil.
func (ac *APICreate) SetNillableProtocol(s *string) *APICreate {
	if s != nil {
		ac.SetProtocol(*s)
	}
	return ac
}

// SetServiceName sets the "service_name" field.
func (ac *APICreate) SetServiceName(s string) *APICreate {
	ac.mutation.SetServiceName(s)
	return ac
}

// SetNillableServiceName sets the "service_name" field if the given value is not nil.
func (ac *APICreate) SetNillableServiceName(s *string) *APICreate {
	if s != nil {
		ac.SetServiceName(*s)
	}
	return ac
}

// SetMethod sets the "method" field.
func (ac *APICreate) SetMethod(s string) *APICreate {
	ac.mutation.SetMethod(s)
	return ac
}

// SetNillableMethod sets the "method" field if the given value is not nil.
func (ac *APICreate) SetNillableMethod(s *string) *APICreate {
	if s != nil {
		ac.SetMethod(*s)
	}
	return ac
}

// SetMethodName sets the "method_name" field.
func (ac *APICreate) SetMethodName(s string) *APICreate {
	ac.mutation.SetMethodName(s)
	return ac
}

// SetNillableMethodName sets the "method_name" field if the given value is not nil.
func (ac *APICreate) SetNillableMethodName(s *string) *APICreate {
	if s != nil {
		ac.SetMethodName(*s)
	}
	return ac
}

// SetPath sets the "path" field.
func (ac *APICreate) SetPath(s string) *APICreate {
	ac.mutation.SetPath(s)
	return ac
}

// SetNillablePath sets the "path" field if the given value is not nil.
func (ac *APICreate) SetNillablePath(s *string) *APICreate {
	if s != nil {
		ac.SetPath(*s)
	}
	return ac
}

// SetExported sets the "exported" field.
func (ac *APICreate) SetExported(b bool) *APICreate {
	ac.mutation.SetExported(b)
	return ac
}

// SetNillableExported sets the "exported" field if the given value is not nil.
func (ac *APICreate) SetNillableExported(b *bool) *APICreate {
	if b != nil {
		ac.SetExported(*b)
	}
	return ac
}

// SetPathPrefix sets the "path_prefix" field.
func (ac *APICreate) SetPathPrefix(s string) *APICreate {
	ac.mutation.SetPathPrefix(s)
	return ac
}

// SetNillablePathPrefix sets the "path_prefix" field if the given value is not nil.
func (ac *APICreate) SetNillablePathPrefix(s *string) *APICreate {
	if s != nil {
		ac.SetPathPrefix(*s)
	}
	return ac
}

// SetDomains sets the "domains" field.
func (ac *APICreate) SetDomains(s []string) *APICreate {
	ac.mutation.SetDomains(s)
	return ac
}

// SetDepracated sets the "depracated" field.
func (ac *APICreate) SetDepracated(b bool) *APICreate {
	ac.mutation.SetDepracated(b)
	return ac
}

// SetNillableDepracated sets the "depracated" field if the given value is not nil.
func (ac *APICreate) SetNillableDepracated(b *bool) *APICreate {
	if b != nil {
		ac.SetDepracated(*b)
	}
	return ac
}

// SetID sets the "id" field.
func (ac *APICreate) SetID(u uuid.UUID) *APICreate {
	ac.mutation.SetID(u)
	return ac
}

// SetNillableID sets the "id" field if the given value is not nil.
func (ac *APICreate) SetNillableID(u *uuid.UUID) *APICreate {
	if u != nil {
		ac.SetID(*u)
	}
	return ac
}

// Mutation returns the APIMutation object of the builder.
func (ac *APICreate) Mutation() *APIMutation {
	return ac.mutation
}

// Save creates the Api in the database.
func (ac *APICreate) Save(ctx context.Context) (*Api, error) {
	var (
		err  error
		node *Api
	)
	if err := ac.defaults(); err != nil {
		return nil, err
	}
	if len(ac.hooks) == 0 {
		if err = ac.check(); err != nil {
			return nil, err
		}
		node, err = ac.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*APIMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ac.check(); err != nil {
				return nil, err
			}
			ac.mutation = mutation
			if node, err = ac.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(ac.hooks) - 1; i >= 0; i-- {
			if ac.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ac.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, ac.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Api)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from APIMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (ac *APICreate) SaveX(ctx context.Context) *Api {
	v, err := ac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ac *APICreate) Exec(ctx context.Context) error {
	_, err := ac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ac *APICreate) ExecX(ctx context.Context) {
	if err := ac.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ac *APICreate) defaults() error {
	if _, ok := ac.mutation.CreatedAt(); !ok {
		if api.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized api.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := api.DefaultCreatedAt()
		ac.mutation.SetCreatedAt(v)
	}
	if _, ok := ac.mutation.UpdatedAt(); !ok {
		if api.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized api.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := api.DefaultUpdatedAt()
		ac.mutation.SetUpdatedAt(v)
	}
	if _, ok := ac.mutation.DeletedAt(); !ok {
		if api.DefaultDeletedAt == nil {
			return fmt.Errorf("ent: uninitialized api.DefaultDeletedAt (forgotten import ent/runtime?)")
		}
		v := api.DefaultDeletedAt()
		ac.mutation.SetDeletedAt(v)
	}
	if _, ok := ac.mutation.Protocol(); !ok {
		v := api.DefaultProtocol
		ac.mutation.SetProtocol(v)
	}
	if _, ok := ac.mutation.ServiceName(); !ok {
		v := api.DefaultServiceName
		ac.mutation.SetServiceName(v)
	}
	if _, ok := ac.mutation.Method(); !ok {
		v := api.DefaultMethod
		ac.mutation.SetMethod(v)
	}
	if _, ok := ac.mutation.MethodName(); !ok {
		v := api.DefaultMethodName
		ac.mutation.SetMethodName(v)
	}
	if _, ok := ac.mutation.Path(); !ok {
		v := api.DefaultPath
		ac.mutation.SetPath(v)
	}
	if _, ok := ac.mutation.Exported(); !ok {
		v := api.DefaultExported
		ac.mutation.SetExported(v)
	}
	if _, ok := ac.mutation.PathPrefix(); !ok {
		v := api.DefaultPathPrefix
		ac.mutation.SetPathPrefix(v)
	}
	if _, ok := ac.mutation.Domains(); !ok {
		v := api.DefaultDomains
		ac.mutation.SetDomains(v)
	}
	if _, ok := ac.mutation.Depracated(); !ok {
		v := api.DefaultDepracated
		ac.mutation.SetDepracated(v)
	}
	if _, ok := ac.mutation.ID(); !ok {
		if api.DefaultID == nil {
			return fmt.Errorf("ent: uninitialized api.DefaultID (forgotten import ent/runtime?)")
		}
		v := api.DefaultID()
		ac.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (ac *APICreate) check() error {
	if _, ok := ac.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Api.created_at"`)}
	}
	if _, ok := ac.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Api.updated_at"`)}
	}
	if _, ok := ac.mutation.DeletedAt(); !ok {
		return &ValidationError{Name: "deleted_at", err: errors.New(`ent: missing required field "Api.deleted_at"`)}
	}
	return nil
}

func (ac *APICreate) sqlSave(ctx context.Context) (*Api, error) {
	_node, _spec := ac.createSpec()
	if err := sqlgraph.CreateNode(ctx, ac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	return _node, nil
}

func (ac *APICreate) createSpec() (*Api, *sqlgraph.CreateSpec) {
	var (
		_node = &Api{config: ac.config}
		_spec = &sqlgraph.CreateSpec{
			Table: api.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: api.FieldID,
			},
		}
	)
	_spec.OnConflict = ac.conflict
	if id, ok := ac.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := ac.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: api.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := ac.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: api.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := ac.mutation.DeletedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: api.FieldDeletedAt,
		})
		_node.DeletedAt = value
	}
	if value, ok := ac.mutation.Protocol(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: api.FieldProtocol,
		})
		_node.Protocol = value
	}
	if value, ok := ac.mutation.ServiceName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: api.FieldServiceName,
		})
		_node.ServiceName = value
	}
	if value, ok := ac.mutation.Method(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: api.FieldMethod,
		})
		_node.Method = value
	}
	if value, ok := ac.mutation.MethodName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: api.FieldMethodName,
		})
		_node.MethodName = value
	}
	if value, ok := ac.mutation.Path(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: api.FieldPath,
		})
		_node.Path = value
	}
	if value, ok := ac.mutation.Exported(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: api.FieldExported,
		})
		_node.Exported = value
	}
	if value, ok := ac.mutation.PathPrefix(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: api.FieldPathPrefix,
		})
		_node.PathPrefix = value
	}
	if value, ok := ac.mutation.Domains(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: api.FieldDomains,
		})
		_node.Domains = value
	}
	if value, ok := ac.mutation.Depracated(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: api.FieldDepracated,
		})
		_node.Depracated = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Api.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ApiUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (ac *APICreate) OnConflict(opts ...sql.ConflictOption) *ApiUpsertOne {
	ac.conflict = opts
	return &ApiUpsertOne{
		create: ac,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Api.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (ac *APICreate) OnConflictColumns(columns ...string) *ApiUpsertOne {
	ac.conflict = append(ac.conflict, sql.ConflictColumns(columns...))
	return &ApiUpsertOne{
		create: ac,
	}
}

type (
	// ApiUpsertOne is the builder for "upsert"-ing
	//  one Api node.
	ApiUpsertOne struct {
		create *APICreate
	}

	// ApiUpsert is the "OnConflict" setter.
	ApiUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreatedAt sets the "created_at" field.
func (u *ApiUpsert) SetCreatedAt(v uint32) *ApiUpsert {
	u.Set(api.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *ApiUpsert) UpdateCreatedAt() *ApiUpsert {
	u.SetExcluded(api.FieldCreatedAt)
	return u
}

// AddCreatedAt adds v to the "created_at" field.
func (u *ApiUpsert) AddCreatedAt(v uint32) *ApiUpsert {
	u.Add(api.FieldCreatedAt, v)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ApiUpsert) SetUpdatedAt(v uint32) *ApiUpsert {
	u.Set(api.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ApiUpsert) UpdateUpdatedAt() *ApiUpsert {
	u.SetExcluded(api.FieldUpdatedAt)
	return u
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *ApiUpsert) AddUpdatedAt(v uint32) *ApiUpsert {
	u.Add(api.FieldUpdatedAt, v)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *ApiUpsert) SetDeletedAt(v uint32) *ApiUpsert {
	u.Set(api.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *ApiUpsert) UpdateDeletedAt() *ApiUpsert {
	u.SetExcluded(api.FieldDeletedAt)
	return u
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *ApiUpsert) AddDeletedAt(v uint32) *ApiUpsert {
	u.Add(api.FieldDeletedAt, v)
	return u
}

// SetProtocol sets the "protocol" field.
func (u *ApiUpsert) SetProtocol(v string) *ApiUpsert {
	u.Set(api.FieldProtocol, v)
	return u
}

// UpdateProtocol sets the "protocol" field to the value that was provided on create.
func (u *ApiUpsert) UpdateProtocol() *ApiUpsert {
	u.SetExcluded(api.FieldProtocol)
	return u
}

// ClearProtocol clears the value of the "protocol" field.
func (u *ApiUpsert) ClearProtocol() *ApiUpsert {
	u.SetNull(api.FieldProtocol)
	return u
}

// SetServiceName sets the "service_name" field.
func (u *ApiUpsert) SetServiceName(v string) *ApiUpsert {
	u.Set(api.FieldServiceName, v)
	return u
}

// UpdateServiceName sets the "service_name" field to the value that was provided on create.
func (u *ApiUpsert) UpdateServiceName() *ApiUpsert {
	u.SetExcluded(api.FieldServiceName)
	return u
}

// ClearServiceName clears the value of the "service_name" field.
func (u *ApiUpsert) ClearServiceName() *ApiUpsert {
	u.SetNull(api.FieldServiceName)
	return u
}

// SetMethod sets the "method" field.
func (u *ApiUpsert) SetMethod(v string) *ApiUpsert {
	u.Set(api.FieldMethod, v)
	return u
}

// UpdateMethod sets the "method" field to the value that was provided on create.
func (u *ApiUpsert) UpdateMethod() *ApiUpsert {
	u.SetExcluded(api.FieldMethod)
	return u
}

// ClearMethod clears the value of the "method" field.
func (u *ApiUpsert) ClearMethod() *ApiUpsert {
	u.SetNull(api.FieldMethod)
	return u
}

// SetMethodName sets the "method_name" field.
func (u *ApiUpsert) SetMethodName(v string) *ApiUpsert {
	u.Set(api.FieldMethodName, v)
	return u
}

// UpdateMethodName sets the "method_name" field to the value that was provided on create.
func (u *ApiUpsert) UpdateMethodName() *ApiUpsert {
	u.SetExcluded(api.FieldMethodName)
	return u
}

// ClearMethodName clears the value of the "method_name" field.
func (u *ApiUpsert) ClearMethodName() *ApiUpsert {
	u.SetNull(api.FieldMethodName)
	return u
}

// SetPath sets the "path" field.
func (u *ApiUpsert) SetPath(v string) *ApiUpsert {
	u.Set(api.FieldPath, v)
	return u
}

// UpdatePath sets the "path" field to the value that was provided on create.
func (u *ApiUpsert) UpdatePath() *ApiUpsert {
	u.SetExcluded(api.FieldPath)
	return u
}

// ClearPath clears the value of the "path" field.
func (u *ApiUpsert) ClearPath() *ApiUpsert {
	u.SetNull(api.FieldPath)
	return u
}

// SetExported sets the "exported" field.
func (u *ApiUpsert) SetExported(v bool) *ApiUpsert {
	u.Set(api.FieldExported, v)
	return u
}

// UpdateExported sets the "exported" field to the value that was provided on create.
func (u *ApiUpsert) UpdateExported() *ApiUpsert {
	u.SetExcluded(api.FieldExported)
	return u
}

// ClearExported clears the value of the "exported" field.
func (u *ApiUpsert) ClearExported() *ApiUpsert {
	u.SetNull(api.FieldExported)
	return u
}

// SetPathPrefix sets the "path_prefix" field.
func (u *ApiUpsert) SetPathPrefix(v string) *ApiUpsert {
	u.Set(api.FieldPathPrefix, v)
	return u
}

// UpdatePathPrefix sets the "path_prefix" field to the value that was provided on create.
func (u *ApiUpsert) UpdatePathPrefix() *ApiUpsert {
	u.SetExcluded(api.FieldPathPrefix)
	return u
}

// ClearPathPrefix clears the value of the "path_prefix" field.
func (u *ApiUpsert) ClearPathPrefix() *ApiUpsert {
	u.SetNull(api.FieldPathPrefix)
	return u
}

// SetDomains sets the "domains" field.
func (u *ApiUpsert) SetDomains(v []string) *ApiUpsert {
	u.Set(api.FieldDomains, v)
	return u
}

// UpdateDomains sets the "domains" field to the value that was provided on create.
func (u *ApiUpsert) UpdateDomains() *ApiUpsert {
	u.SetExcluded(api.FieldDomains)
	return u
}

// ClearDomains clears the value of the "domains" field.
func (u *ApiUpsert) ClearDomains() *ApiUpsert {
	u.SetNull(api.FieldDomains)
	return u
}

// SetDepracated sets the "depracated" field.
func (u *ApiUpsert) SetDepracated(v bool) *ApiUpsert {
	u.Set(api.FieldDepracated, v)
	return u
}

// UpdateDepracated sets the "depracated" field to the value that was provided on create.
func (u *ApiUpsert) UpdateDepracated() *ApiUpsert {
	u.SetExcluded(api.FieldDepracated)
	return u
}

// ClearDepracated clears the value of the "depracated" field.
func (u *ApiUpsert) ClearDepracated() *ApiUpsert {
	u.SetNull(api.FieldDepracated)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Api.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(api.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *ApiUpsertOne) UpdateNewValues() *ApiUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(api.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.Api.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *ApiUpsertOne) Ignore() *ApiUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ApiUpsertOne) DoNothing() *ApiUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the APICreate.OnConflict
// documentation for more info.
func (u *ApiUpsertOne) Update(set func(*ApiUpsert)) *ApiUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ApiUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *ApiUpsertOne) SetCreatedAt(v uint32) *ApiUpsertOne {
	return u.Update(func(s *ApiUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *ApiUpsertOne) AddCreatedAt(v uint32) *ApiUpsertOne {
	return u.Update(func(s *ApiUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *ApiUpsertOne) UpdateCreatedAt() *ApiUpsertOne {
	return u.Update(func(s *ApiUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ApiUpsertOne) SetUpdatedAt(v uint32) *ApiUpsertOne {
	return u.Update(func(s *ApiUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *ApiUpsertOne) AddUpdatedAt(v uint32) *ApiUpsertOne {
	return u.Update(func(s *ApiUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ApiUpsertOne) UpdateUpdatedAt() *ApiUpsertOne {
	return u.Update(func(s *ApiUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *ApiUpsertOne) SetDeletedAt(v uint32) *ApiUpsertOne {
	return u.Update(func(s *ApiUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *ApiUpsertOne) AddDeletedAt(v uint32) *ApiUpsertOne {
	return u.Update(func(s *ApiUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *ApiUpsertOne) UpdateDeletedAt() *ApiUpsertOne {
	return u.Update(func(s *ApiUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetProtocol sets the "protocol" field.
func (u *ApiUpsertOne) SetProtocol(v string) *ApiUpsertOne {
	return u.Update(func(s *ApiUpsert) {
		s.SetProtocol(v)
	})
}

// UpdateProtocol sets the "protocol" field to the value that was provided on create.
func (u *ApiUpsertOne) UpdateProtocol() *ApiUpsertOne {
	return u.Update(func(s *ApiUpsert) {
		s.UpdateProtocol()
	})
}

// ClearProtocol clears the value of the "protocol" field.
func (u *ApiUpsertOne) ClearProtocol() *ApiUpsertOne {
	return u.Update(func(s *ApiUpsert) {
		s.ClearProtocol()
	})
}

// SetServiceName sets the "service_name" field.
func (u *ApiUpsertOne) SetServiceName(v string) *ApiUpsertOne {
	return u.Update(func(s *ApiUpsert) {
		s.SetServiceName(v)
	})
}

// UpdateServiceName sets the "service_name" field to the value that was provided on create.
func (u *ApiUpsertOne) UpdateServiceName() *ApiUpsertOne {
	return u.Update(func(s *ApiUpsert) {
		s.UpdateServiceName()
	})
}

// ClearServiceName clears the value of the "service_name" field.
func (u *ApiUpsertOne) ClearServiceName() *ApiUpsertOne {
	return u.Update(func(s *ApiUpsert) {
		s.ClearServiceName()
	})
}

// SetMethod sets the "method" field.
func (u *ApiUpsertOne) SetMethod(v string) *ApiUpsertOne {
	return u.Update(func(s *ApiUpsert) {
		s.SetMethod(v)
	})
}

// UpdateMethod sets the "method" field to the value that was provided on create.
func (u *ApiUpsertOne) UpdateMethod() *ApiUpsertOne {
	return u.Update(func(s *ApiUpsert) {
		s.UpdateMethod()
	})
}

// ClearMethod clears the value of the "method" field.
func (u *ApiUpsertOne) ClearMethod() *ApiUpsertOne {
	return u.Update(func(s *ApiUpsert) {
		s.ClearMethod()
	})
}

// SetMethodName sets the "method_name" field.
func (u *ApiUpsertOne) SetMethodName(v string) *ApiUpsertOne {
	return u.Update(func(s *ApiUpsert) {
		s.SetMethodName(v)
	})
}

// UpdateMethodName sets the "method_name" field to the value that was provided on create.
func (u *ApiUpsertOne) UpdateMethodName() *ApiUpsertOne {
	return u.Update(func(s *ApiUpsert) {
		s.UpdateMethodName()
	})
}

// ClearMethodName clears the value of the "method_name" field.
func (u *ApiUpsertOne) ClearMethodName() *ApiUpsertOne {
	return u.Update(func(s *ApiUpsert) {
		s.ClearMethodName()
	})
}

// SetPath sets the "path" field.
func (u *ApiUpsertOne) SetPath(v string) *ApiUpsertOne {
	return u.Update(func(s *ApiUpsert) {
		s.SetPath(v)
	})
}

// UpdatePath sets the "path" field to the value that was provided on create.
func (u *ApiUpsertOne) UpdatePath() *ApiUpsertOne {
	return u.Update(func(s *ApiUpsert) {
		s.UpdatePath()
	})
}

// ClearPath clears the value of the "path" field.
func (u *ApiUpsertOne) ClearPath() *ApiUpsertOne {
	return u.Update(func(s *ApiUpsert) {
		s.ClearPath()
	})
}

// SetExported sets the "exported" field.
func (u *ApiUpsertOne) SetExported(v bool) *ApiUpsertOne {
	return u.Update(func(s *ApiUpsert) {
		s.SetExported(v)
	})
}

// UpdateExported sets the "exported" field to the value that was provided on create.
func (u *ApiUpsertOne) UpdateExported() *ApiUpsertOne {
	return u.Update(func(s *ApiUpsert) {
		s.UpdateExported()
	})
}

// ClearExported clears the value of the "exported" field.
func (u *ApiUpsertOne) ClearExported() *ApiUpsertOne {
	return u.Update(func(s *ApiUpsert) {
		s.ClearExported()
	})
}

// SetPathPrefix sets the "path_prefix" field.
func (u *ApiUpsertOne) SetPathPrefix(v string) *ApiUpsertOne {
	return u.Update(func(s *ApiUpsert) {
		s.SetPathPrefix(v)
	})
}

// UpdatePathPrefix sets the "path_prefix" field to the value that was provided on create.
func (u *ApiUpsertOne) UpdatePathPrefix() *ApiUpsertOne {
	return u.Update(func(s *ApiUpsert) {
		s.UpdatePathPrefix()
	})
}

// ClearPathPrefix clears the value of the "path_prefix" field.
func (u *ApiUpsertOne) ClearPathPrefix() *ApiUpsertOne {
	return u.Update(func(s *ApiUpsert) {
		s.ClearPathPrefix()
	})
}

// SetDomains sets the "domains" field.
func (u *ApiUpsertOne) SetDomains(v []string) *ApiUpsertOne {
	return u.Update(func(s *ApiUpsert) {
		s.SetDomains(v)
	})
}

// UpdateDomains sets the "domains" field to the value that was provided on create.
func (u *ApiUpsertOne) UpdateDomains() *ApiUpsertOne {
	return u.Update(func(s *ApiUpsert) {
		s.UpdateDomains()
	})
}

// ClearDomains clears the value of the "domains" field.
func (u *ApiUpsertOne) ClearDomains() *ApiUpsertOne {
	return u.Update(func(s *ApiUpsert) {
		s.ClearDomains()
	})
}

// SetDepracated sets the "depracated" field.
func (u *ApiUpsertOne) SetDepracated(v bool) *ApiUpsertOne {
	return u.Update(func(s *ApiUpsert) {
		s.SetDepracated(v)
	})
}

// UpdateDepracated sets the "depracated" field to the value that was provided on create.
func (u *ApiUpsertOne) UpdateDepracated() *ApiUpsertOne {
	return u.Update(func(s *ApiUpsert) {
		s.UpdateDepracated()
	})
}

// ClearDepracated clears the value of the "depracated" field.
func (u *ApiUpsertOne) ClearDepracated() *ApiUpsertOne {
	return u.Update(func(s *ApiUpsert) {
		s.ClearDepracated()
	})
}

// Exec executes the query.
func (u *ApiUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for APICreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ApiUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *ApiUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: ApiUpsertOne.ID is not supported by MySQL driver. Use ApiUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *ApiUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// APICreateBulk is the builder for creating many Api entities in bulk.
type APICreateBulk struct {
	config
	builders []*APICreate
	conflict []sql.ConflictOption
}

// Save creates the Api entities in the database.
func (acb *APICreateBulk) Save(ctx context.Context) ([]*Api, error) {
	specs := make([]*sqlgraph.CreateSpec, len(acb.builders))
	nodes := make([]*Api, len(acb.builders))
	mutators := make([]Mutator, len(acb.builders))
	for i := range acb.builders {
		func(i int, root context.Context) {
			builder := acb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*APIMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, acb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = acb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, acb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, acb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (acb *APICreateBulk) SaveX(ctx context.Context) []*Api {
	v, err := acb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (acb *APICreateBulk) Exec(ctx context.Context) error {
	_, err := acb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (acb *APICreateBulk) ExecX(ctx context.Context) {
	if err := acb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Api.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ApiUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (acb *APICreateBulk) OnConflict(opts ...sql.ConflictOption) *ApiUpsertBulk {
	acb.conflict = opts
	return &ApiUpsertBulk{
		create: acb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Api.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (acb *APICreateBulk) OnConflictColumns(columns ...string) *ApiUpsertBulk {
	acb.conflict = append(acb.conflict, sql.ConflictColumns(columns...))
	return &ApiUpsertBulk{
		create: acb,
	}
}

// ApiUpsertBulk is the builder for "upsert"-ing
// a bulk of Api nodes.
type ApiUpsertBulk struct {
	create *APICreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Api.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(api.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *ApiUpsertBulk) UpdateNewValues() *ApiUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(api.FieldID)
				return
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Api.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *ApiUpsertBulk) Ignore() *ApiUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ApiUpsertBulk) DoNothing() *ApiUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the APICreateBulk.OnConflict
// documentation for more info.
func (u *ApiUpsertBulk) Update(set func(*ApiUpsert)) *ApiUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ApiUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *ApiUpsertBulk) SetCreatedAt(v uint32) *ApiUpsertBulk {
	return u.Update(func(s *ApiUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *ApiUpsertBulk) AddCreatedAt(v uint32) *ApiUpsertBulk {
	return u.Update(func(s *ApiUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *ApiUpsertBulk) UpdateCreatedAt() *ApiUpsertBulk {
	return u.Update(func(s *ApiUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ApiUpsertBulk) SetUpdatedAt(v uint32) *ApiUpsertBulk {
	return u.Update(func(s *ApiUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *ApiUpsertBulk) AddUpdatedAt(v uint32) *ApiUpsertBulk {
	return u.Update(func(s *ApiUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ApiUpsertBulk) UpdateUpdatedAt() *ApiUpsertBulk {
	return u.Update(func(s *ApiUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *ApiUpsertBulk) SetDeletedAt(v uint32) *ApiUpsertBulk {
	return u.Update(func(s *ApiUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *ApiUpsertBulk) AddDeletedAt(v uint32) *ApiUpsertBulk {
	return u.Update(func(s *ApiUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *ApiUpsertBulk) UpdateDeletedAt() *ApiUpsertBulk {
	return u.Update(func(s *ApiUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetProtocol sets the "protocol" field.
func (u *ApiUpsertBulk) SetProtocol(v string) *ApiUpsertBulk {
	return u.Update(func(s *ApiUpsert) {
		s.SetProtocol(v)
	})
}

// UpdateProtocol sets the "protocol" field to the value that was provided on create.
func (u *ApiUpsertBulk) UpdateProtocol() *ApiUpsertBulk {
	return u.Update(func(s *ApiUpsert) {
		s.UpdateProtocol()
	})
}

// ClearProtocol clears the value of the "protocol" field.
func (u *ApiUpsertBulk) ClearProtocol() *ApiUpsertBulk {
	return u.Update(func(s *ApiUpsert) {
		s.ClearProtocol()
	})
}

// SetServiceName sets the "service_name" field.
func (u *ApiUpsertBulk) SetServiceName(v string) *ApiUpsertBulk {
	return u.Update(func(s *ApiUpsert) {
		s.SetServiceName(v)
	})
}

// UpdateServiceName sets the "service_name" field to the value that was provided on create.
func (u *ApiUpsertBulk) UpdateServiceName() *ApiUpsertBulk {
	return u.Update(func(s *ApiUpsert) {
		s.UpdateServiceName()
	})
}

// ClearServiceName clears the value of the "service_name" field.
func (u *ApiUpsertBulk) ClearServiceName() *ApiUpsertBulk {
	return u.Update(func(s *ApiUpsert) {
		s.ClearServiceName()
	})
}

// SetMethod sets the "method" field.
func (u *ApiUpsertBulk) SetMethod(v string) *ApiUpsertBulk {
	return u.Update(func(s *ApiUpsert) {
		s.SetMethod(v)
	})
}

// UpdateMethod sets the "method" field to the value that was provided on create.
func (u *ApiUpsertBulk) UpdateMethod() *ApiUpsertBulk {
	return u.Update(func(s *ApiUpsert) {
		s.UpdateMethod()
	})
}

// ClearMethod clears the value of the "method" field.
func (u *ApiUpsertBulk) ClearMethod() *ApiUpsertBulk {
	return u.Update(func(s *ApiUpsert) {
		s.ClearMethod()
	})
}

// SetMethodName sets the "method_name" field.
func (u *ApiUpsertBulk) SetMethodName(v string) *ApiUpsertBulk {
	return u.Update(func(s *ApiUpsert) {
		s.SetMethodName(v)
	})
}

// UpdateMethodName sets the "method_name" field to the value that was provided on create.
func (u *ApiUpsertBulk) UpdateMethodName() *ApiUpsertBulk {
	return u.Update(func(s *ApiUpsert) {
		s.UpdateMethodName()
	})
}

// ClearMethodName clears the value of the "method_name" field.
func (u *ApiUpsertBulk) ClearMethodName() *ApiUpsertBulk {
	return u.Update(func(s *ApiUpsert) {
		s.ClearMethodName()
	})
}

// SetPath sets the "path" field.
func (u *ApiUpsertBulk) SetPath(v string) *ApiUpsertBulk {
	return u.Update(func(s *ApiUpsert) {
		s.SetPath(v)
	})
}

// UpdatePath sets the "path" field to the value that was provided on create.
func (u *ApiUpsertBulk) UpdatePath() *ApiUpsertBulk {
	return u.Update(func(s *ApiUpsert) {
		s.UpdatePath()
	})
}

// ClearPath clears the value of the "path" field.
func (u *ApiUpsertBulk) ClearPath() *ApiUpsertBulk {
	return u.Update(func(s *ApiUpsert) {
		s.ClearPath()
	})
}

// SetExported sets the "exported" field.
func (u *ApiUpsertBulk) SetExported(v bool) *ApiUpsertBulk {
	return u.Update(func(s *ApiUpsert) {
		s.SetExported(v)
	})
}

// UpdateExported sets the "exported" field to the value that was provided on create.
func (u *ApiUpsertBulk) UpdateExported() *ApiUpsertBulk {
	return u.Update(func(s *ApiUpsert) {
		s.UpdateExported()
	})
}

// ClearExported clears the value of the "exported" field.
func (u *ApiUpsertBulk) ClearExported() *ApiUpsertBulk {
	return u.Update(func(s *ApiUpsert) {
		s.ClearExported()
	})
}

// SetPathPrefix sets the "path_prefix" field.
func (u *ApiUpsertBulk) SetPathPrefix(v string) *ApiUpsertBulk {
	return u.Update(func(s *ApiUpsert) {
		s.SetPathPrefix(v)
	})
}

// UpdatePathPrefix sets the "path_prefix" field to the value that was provided on create.
func (u *ApiUpsertBulk) UpdatePathPrefix() *ApiUpsertBulk {
	return u.Update(func(s *ApiUpsert) {
		s.UpdatePathPrefix()
	})
}

// ClearPathPrefix clears the value of the "path_prefix" field.
func (u *ApiUpsertBulk) ClearPathPrefix() *ApiUpsertBulk {
	return u.Update(func(s *ApiUpsert) {
		s.ClearPathPrefix()
	})
}

// SetDomains sets the "domains" field.
func (u *ApiUpsertBulk) SetDomains(v []string) *ApiUpsertBulk {
	return u.Update(func(s *ApiUpsert) {
		s.SetDomains(v)
	})
}

// UpdateDomains sets the "domains" field to the value that was provided on create.
func (u *ApiUpsertBulk) UpdateDomains() *ApiUpsertBulk {
	return u.Update(func(s *ApiUpsert) {
		s.UpdateDomains()
	})
}

// ClearDomains clears the value of the "domains" field.
func (u *ApiUpsertBulk) ClearDomains() *ApiUpsertBulk {
	return u.Update(func(s *ApiUpsert) {
		s.ClearDomains()
	})
}

// SetDepracated sets the "depracated" field.
func (u *ApiUpsertBulk) SetDepracated(v bool) *ApiUpsertBulk {
	return u.Update(func(s *ApiUpsert) {
		s.SetDepracated(v)
	})
}

// UpdateDepracated sets the "depracated" field to the value that was provided on create.
func (u *ApiUpsertBulk) UpdateDepracated() *ApiUpsertBulk {
	return u.Update(func(s *ApiUpsert) {
		s.UpdateDepracated()
	})
}

// ClearDepracated clears the value of the "depracated" field.
func (u *ApiUpsertBulk) ClearDepracated() *ApiUpsertBulk {
	return u.Update(func(s *ApiUpsert) {
		s.ClearDepracated()
	})
}

// Exec executes the query.
func (u *ApiUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the APICreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for APICreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ApiUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
